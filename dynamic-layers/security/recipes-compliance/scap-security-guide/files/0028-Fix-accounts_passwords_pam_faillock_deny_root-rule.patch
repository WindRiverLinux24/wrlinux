From c8eef4d5b8f2c7cdcb79fd930a986c0b715f1af1 Mon Sep 17 00:00:00 2001
From: Yi Zhao <yi.zhao@windriver.com>
Date: Wed, 30 Nov 2022 15:11:54 +0800
Subject: [PATCH] Fix accounts_passwords_pam_faillock_deny_root rule

Upstream-Status: Inappropriate [WRLinux specific]

Signed-off-by: Yi Zhao <yi.zhao@windriver.com>
---
 .../bash/shared.sh                            |   2 +-
 .../oval/wrlinux.xml                          | 172 ++++++++++++++++++
 .../rule.yml                                  |   5 +-
 3 files changed, 177 insertions(+), 2 deletions(-)
 create mode 100644 linux_os/guide/system/accounts/accounts-pam/locking_out_password_attempts/accounts_passwords_pam_faillock_deny_root/oval/wrlinux.xml

diff --git a/linux_os/guide/system/accounts/accounts-pam/locking_out_password_attempts/accounts_passwords_pam_faillock_deny_root/bash/shared.sh b/linux_os/guide/system/accounts/accounts-pam/locking_out_password_attempts/accounts_passwords_pam_faillock_deny_root/bash/shared.sh
index 09d8aeee0e..bc1e7ef6dd 100644
--- a/linux_os/guide/system/accounts/accounts-pam/locking_out_password_attempts/accounts_passwords_pam_faillock_deny_root/bash/shared.sh
+++ b/linux_os/guide/system/accounts/accounts-pam/locking_out_password_attempts/accounts_passwords_pam_faillock_deny_root/bash/shared.sh
@@ -1,4 +1,4 @@
-# platform = multi_platform_rhel,multi_platform_fedora,multi_platform_ol,multi_platform_rhv
+# platform = multi_platform_rhel,multi_platform_fedora,multi_platform_ol,multi_platform_rhv,multi_platform_wrlinux
 
 {{{ bash_pam_faillock_enable() }}}
 {{{ bash_pam_faillock_parameter_value("even_deny_root", "") }}}
diff --git a/linux_os/guide/system/accounts/accounts-pam/locking_out_password_attempts/accounts_passwords_pam_faillock_deny_root/oval/wrlinux.xml b/linux_os/guide/system/accounts/accounts-pam/locking_out_password_attempts/accounts_passwords_pam_faillock_deny_root/oval/wrlinux.xml
new file mode 100644
index 0000000000..6d6715eb7a
--- /dev/null
+++ b/linux_os/guide/system/accounts/accounts-pam/locking_out_password_attempts/accounts_passwords_pam_faillock_deny_root/oval/wrlinux.xml
@@ -0,0 +1,172 @@
+<def-group>
+  <definition class="compliance" id="{{{ rule_id }}}" version="4">
+    {{{ oval_metadata("The root account should be configured to deny access after the number of
+      defined failed attempts has been reached.") }}}
+    <criteria operator="AND" comment="Check the proper configuration of pam_faillock.so">
+      <criteria operator="AND" comment="Check if pam_faillock.so is properly enabled">
+        <!-- pam_unix.so is a control module present in all realistic scenarios and also used
+             as reference for the correct position of pam_faillock.so in auth section. If the
+             system is properly configured, it must appear only once in auth section. -->
+        <criterion test_ref="test_accounts_passwords_pam_faillock_deny_root_common_pam_unix_auth"
+            comment="pam_unix.so appears only once in auth section of common-auth"/>
+        <criterion test_ref="test_accounts_passwords_pam_faillock_deny_root_common_pam_faillock_auth"
+            comment="pam_faillock.so is properly defined in auth section of common-auth"/>
+        <criterion test_ref="test_accounts_passwords_pam_faillock_deny_root_common_pam_faillock_account"
+            comment="pam_faillock.so is properly defined in common-account"/>
+      </criteria>
+
+      <!-- pam_faillock.so parameters should be defined in /etc/security/faillock.conf whenever
+           possible. But due to backwards compatibility, they are also allowed in pam files
+           directly. In case they are defined in both places, pam files have precedence and this
+           may confuse the assessment. The following tests ensure only one option is used. -->
+      <criteria operator="OR" comment="Check expected value for pam_faillock.so deny_root parameter">
+        <criteria operator="AND"
+            comment="Check expected pam_faillock.so deny_root parameter in pam files">
+          <criterion test_ref="test_accounts_passwords_pam_faillock_deny_root_parameter_pamd_common"
+              comment="Check the deny_root parameter is present common-auth file"/>
+          <criterion test_ref="test_accounts_passwords_pam_faillock_deny_root_parameter_no_faillock_conf"
+              comment="Ensure the deny_root parameter is not present in /etc/security/faillock.conf"/>
+        </criteria>
+        <criteria operator="AND"
+            comment="Check expected pam_faillock.so deny_root parameter in faillock.conf">
+          <criterion test_ref="test_accounts_passwords_pam_faillock_deny_root_parameter_no_pamd_common"
+              comment="Check the deny_root parameter is not present common-auth file"/>
+          <criterion test_ref="test_accounts_passwords_pam_faillock_deny_root_parameter_faillock_conf"
+              comment="Ensure the deny_root parameter is present in /etc/security/faillock.conf"/>
+        </criteria>
+      </criteria>
+    </criteria>
+  </definition>
+
+  <!-- The following tests demand complex regex which are necessary more than once.
+       These variables make simpler the usage of regex patterns. -->
+  <constant_variable id="var_accounts_passwords_pam_faillock_deny_root_pam_unix_regex"
+                datatype="string" version="1"
+                comment="regex to identify pam_unix.so in auth section of pam files">
+    <value>^\s*auth.*pam_unix\.so</value>
+  </constant_variable>
+
+  <constant_variable id="var_accounts_passwords_pam_faillock_deny_root_pam_faillock_auth_regex"
+                datatype="string" version="1"
+                comment="regex to identify pam_faillock.so entries in auth section of pam files">
+      <value>^\s*auth\s+required\s+pam_faillock\.so.*preauth.*[\s\S]*^\s*auth.*pam_unix\.so[\s\S]*^\s*auth\s+\[default=die\]\s+pam_faillock\.so\s+authfail[\s\S]*^\s*auth\s+sufficient\s+pam_faillock\.so\s+authsucc</value>
+  </constant_variable>
+
+  <constant_variable id="var_accounts_passwords_pam_faillock_deny_root_pam_faillock_account_regex"
+                datatype="string" version="1"
+                comment="regex to identify pam_faillock.so entry in account section of pam files">
+    <value>^\s*account\s+required\s+pam_faillock\.so.*$</value>
+  </constant_variable>
+
+  <constant_variable
+    id="var_accounts_passwords_pam_faillock_deny_root_pam_faillock_deny_root_parameter_regex"
+    datatype="string" version="1"
+    comment="regex to identify pam_faillock.so deny_root entry in auth section of pam files">
+    <value>^[\s]*auth[\s]+.+[\s]+pam_faillock.so[\s]+[^\n]*even_deny_root</value>
+  </constant_variable>
+
+  <constant_variable
+              id="var_accounts_passwords_pam_faillock_deny_root_faillock_conf_deny_root_parameter_regex"
+              datatype="string" version="1"
+              comment="regex to identify deny_root entry in /etc/security/faillock.conf">
+    <value>^[\s]*even_deny_root</value>
+  </constant_variable>
+
+  <!-- Check occurrences of pam_unix.so in auth section of common-auth file -->
+  <ind:textfilecontent54_test check="all" check_existence="none_exist" version="1"
+        id="test_accounts_passwords_pam_faillock_deny_root_common_pam_unix_auth"
+        comment="No more than one pam_unix.so is expected in auth section of common-auth">
+    <ind:object object_ref="object_accounts_passwords_pam_faillock_deny_root_common_pam_unix_auth"/>
+  </ind:textfilecontent54_test>
+
+  <ind:textfilecontent54_object version="1"
+        id="object_accounts_passwords_pam_faillock_deny_root_common_pam_unix_auth"
+        comment="Get the second and subsequent occurrences of pam_unix.so in auth section of common-auth">
+    <ind:filepath>/etc/pam.d/common-auth</ind:filepath>
+    <ind:pattern operation="pattern match"
+                 var_ref="var_accounts_passwords_pam_faillock_deny_root_pam_unix_regex"/>
+    <ind:instance datatype="int" operation="greater than">1</ind:instance>
+  </ind:textfilecontent54_object>
+
+  <!-- Check common definition of pam_faillock.so in common-auth -->
+  <ind:textfilecontent54_test check="all" check_existence="only_one_exists" version="1"
+        id="test_accounts_passwords_pam_faillock_deny_root_common_pam_faillock_auth"
+        comment="One and only one occurrence is expected in auth section of common-auth">
+    <ind:object
+        object_ref="object_accounts_passwords_pam_faillock_deny_root_common_pam_faillock_auth"/>
+  </ind:textfilecontent54_test>
+
+  <ind:textfilecontent54_object version="1"
+        id="object_accounts_passwords_pam_faillock_deny_root_common_pam_faillock_auth"
+        comment="Check common definition of pam_faillock.so in auth section of common-auth">
+    <ind:filepath>/etc/pam.d/common-auth</ind:filepath>
+    <ind:pattern operation="pattern match"
+                 var_ref="var_accounts_passwords_pam_faillock_deny_root_pam_faillock_auth_regex"/>
+    <ind:instance datatype="int" operation="equals">1</ind:instance>
+  </ind:textfilecontent54_object>
+
+  <!-- Check common definition of pam_faillock.so in common-account -->
+  <ind:textfilecontent54_test check="all" check_existence="only_one_exists" version="1"
+        id="test_accounts_passwords_pam_faillock_deny_root_common_pam_faillock_account"
+        comment="One and only one occurrence is expected in common-account">
+    <ind:object
+        object_ref="object_accounts_passwords_pam_faillock_deny_root_common_pam_faillock_account"/>
+  </ind:textfilecontent54_test>
+
+  <ind:textfilecontent54_object version="1"
+        id="object_accounts_passwords_pam_faillock_deny_root_common_pam_faillock_account"
+        comment="Check common definition of pam_faillock.so in account section of common-account">
+    <ind:filepath>/etc/pam.d/common-account</ind:filepath>
+    <ind:pattern operation="pattern match"
+                 var_ref="var_accounts_passwords_pam_faillock_deny_root_pam_faillock_account_regex"/>
+    <ind:instance datatype="int" operation="equals">1</ind:instance>
+  </ind:textfilecontent54_object>
+
+
+  <!-- Check absence of deny_root parameter in common-auth -->
+  <ind:textfilecontent54_test check="all" check_existence="none_exist" version="1"
+        id="test_accounts_passwords_pam_faillock_deny_root_parameter_no_pamd_common"
+        comment="Check the absence of deny_root parameter in common-auth">
+    <ind:object object_ref="object_accounts_passwords_pam_faillock_deny_root_parameter_pamd_common"/>
+  </ind:textfilecontent54_test>
+
+  <!-- Check expected value of deny_root parameter in common-auth -->
+  <ind:textfilecontent54_test check="all" check_existence="all_exist" version="1"
+        id="test_accounts_passwords_pam_faillock_deny_root_parameter_pamd_common"
+        comment="Check the expected deny_root value in common-auth">
+    <ind:object object_ref="object_accounts_passwords_pam_faillock_deny_root_parameter_pamd_common"/>
+  </ind:textfilecontent54_test>
+
+  <ind:textfilecontent54_object version="1"
+        id="object_accounts_passwords_pam_faillock_deny_root_parameter_pamd_common"
+        comment="Get the pam_faillock.so deny_root parameter from common-auth file">
+    <ind:filepath>/etc/pam.d/common-auth</ind:filepath>
+    <ind:pattern operation="pattern match"
+                 var_ref="var_accounts_passwords_pam_faillock_deny_root_pam_faillock_deny_root_parameter_regex"/>
+    <ind:instance datatype="int" operation="equals">1</ind:instance>
+  </ind:textfilecontent54_object>
+
+
+  <!-- Check absence of deny_root parameter in /etc/security/faillock.conf -->
+  <ind:textfilecontent54_test check="all" check_existence="none_exist" version="1"
+        id="test_accounts_passwords_pam_faillock_deny_root_parameter_no_faillock_conf"
+        comment="Check the absence of deny_root parameter in /etc/security/faillock.conf">
+    <ind:object object_ref="object_accounts_passwords_pam_faillock_deny_root_parameter_faillock_conf"/>
+  </ind:textfilecontent54_test>
+
+  <!-- Check expected value of deny_root parameter in /etc/security/faillock.conf -->
+  <ind:textfilecontent54_test check="all" check_existence="all_exist" version="1"
+        id="test_accounts_passwords_pam_faillock_deny_root_parameter_faillock_conf"
+        comment="Check the expected deny_root value in /etc/security/faillock.conf">
+    <ind:object object_ref="object_accounts_passwords_pam_faillock_deny_root_parameter_faillock_conf"/>
+  </ind:textfilecontent54_test>
+
+  <ind:textfilecontent54_object version="1"
+      id="object_accounts_passwords_pam_faillock_deny_root_parameter_faillock_conf"
+      comment="Check the expected pam_faillock.so deny_root parameter in /etc/security/faillock.conf">
+    <ind:filepath>/etc/security/faillock.conf</ind:filepath>
+    <ind:pattern operation="pattern match"
+          var_ref="var_accounts_passwords_pam_faillock_deny_root_faillock_conf_deny_root_parameter_regex"/>
+    <ind:instance datatype="int" operation="equals">1</ind:instance>
+  </ind:textfilecontent54_object>
+</def-group>
diff --git a/linux_os/guide/system/accounts/accounts-pam/locking_out_password_attempts/accounts_passwords_pam_faillock_deny_root/rule.yml b/linux_os/guide/system/accounts/accounts-pam/locking_out_password_attempts/accounts_passwords_pam_faillock_deny_root/rule.yml
index b744f39bef..773e806123 100644
--- a/linux_os/guide/system/accounts/accounts-pam/locking_out_password_attempts/accounts_passwords_pam_faillock_deny_root/rule.yml
+++ b/linux_os/guide/system/accounts/accounts-pam/locking_out_password_attempts/accounts_passwords_pam_faillock_deny_root/rule.yml
@@ -8,9 +8,12 @@ description: |-
     incorrect login attempts using <tt>pam_faillock.so</tt>.
 
     pam_faillock.so module requires multiple entries in pam files. These entries must be carefully
-    defined to work as expected. In order to avoid errors when manually editing these files, it is
+    defined to work as expected.
+    {{% if 'wrlinux' not in product %}}
+    In order to avoid errors when manually editing these files, it is
     recommended to use the appropriate tools, such as <tt>authselect</tt> or <tt>authconfig</tt>,
     depending on the OS version.
+    {{% endif %}}
 
 rationale: |-
     By limiting the number of failed logon attempts, the risk of unauthorized system access via
-- 
2.25.1

