From de5953d4790a9bb6d7198bd1144bb0c0f39169ec Mon Sep 17 00:00:00 2001
From: Yi Zhao <yi.zhao@windriver.com>
Date: Thu, 2 Feb 2023 15:40:29 +0800
Subject: [PATCH] Fix accounts_passwords_pam_faillock_deny rule

Upstream-Status: Inappropriate [WRLinux specific]

Signed-off-by: Yi Zhao <yi.zhao@windriver.com>
---
 .../bash/shared.sh                            |   2 +-
 .../oval/wrlinux.xml                          | 191 ++++++++++++++++++
 .../rule.yml                                  |   4 +-
 .../oval/accounts_password_pam_faillock.xml   |  16 ++
 shared/macros/10-bash.jinja                   |   4 +-
 5 files changed, 213 insertions(+), 4 deletions(-)
 create mode 100644 linux_os/guide/system/accounts/accounts-pam/locking_out_password_attempts/accounts_passwords_pam_faillock_deny/oval/wrlinux.xml

diff --git a/linux_os/guide/system/accounts/accounts-pam/locking_out_password_attempts/accounts_passwords_pam_faillock_deny/bash/shared.sh b/linux_os/guide/system/accounts/accounts-pam/locking_out_password_attempts/accounts_passwords_pam_faillock_deny/bash/shared.sh
index 449d912d0d..b17a3db8c6 100644
--- a/linux_os/guide/system/accounts/accounts-pam/locking_out_password_attempts/accounts_passwords_pam_faillock_deny/bash/shared.sh
+++ b/linux_os/guide/system/accounts/accounts-pam/locking_out_password_attempts/accounts_passwords_pam_faillock_deny/bash/shared.sh
@@ -1,4 +1,4 @@
-# platform = multi_platform_rhel,multi_platform_fedora,multi_platform_ol,multi_platform_rhv,multi_platform_sle,multi_platform_ubuntu
+# platform = multi_platform_rhel,multi_platform_fedora,multi_platform_ol,multi_platform_rhv,multi_platform_sle,multi_platform_ubuntu,multi_platform_wrlinux
 
 {{{ bash_instantiate_variables("var_accounts_passwords_pam_faillock_deny") }}}
 
diff --git a/linux_os/guide/system/accounts/accounts-pam/locking_out_password_attempts/accounts_passwords_pam_faillock_deny/oval/wrlinux.xml b/linux_os/guide/system/accounts/accounts-pam/locking_out_password_attempts/accounts_passwords_pam_faillock_deny/oval/wrlinux.xml
new file mode 100644
index 0000000000..80c497f717
--- /dev/null
+++ b/linux_os/guide/system/accounts/accounts-pam/locking_out_password_attempts/accounts_passwords_pam_faillock_deny/oval/wrlinux.xml
@@ -0,0 +1,191 @@
+<def-group>
+  <definition class="compliance" id="{{{ rule_id }}}" version="2">
+    {{{ oval_metadata("Lockout account after failed login attempts") }}}
+    <criteria operator="AND" comment="Check the proper configuration of pam_faillock.so">
+      <criteria operator="AND" comment="Check if pam_faillock.so is properly enabled">
+        <!-- pam_unix.so is a control module present in all realistic scenarios and also used
+             as reference for the correct position of pam_faillock.so in auth section. If the
+             system is properly configured, it must appear only once in auth section. -->
+        <criterion test_ref="test_accounts_passwords_pam_faillock_deny_common_pam_unix_auth"
+            comment="pam_unix.so appears only once in auth section of common-auth"/>
+        <criterion test_ref="test_accounts_passwords_pam_faillock_deny_common_pam_faillock_auth"
+            comment="pam_faillock.so is properly defined in auth section of common-auth"/>
+        <criterion test_ref="test_accounts_passwords_pam_faillock_deny_common_pam_faillock_account"
+            comment="pam_faillock.so is properly defined in common-account"/>
+      </criteria>
+
+      <!-- pam_faillock.so parameters should be defined in /etc/security/faillock.conf whenever
+           possible. But due to backwards compatibility, they are also allowed in pam files
+           directly. In case they are defined in both places, pam files have precedence and this
+           may confuse the assessment. The following tests ensure only one option is used. -->
+      <criteria operator="OR" comment="Check expected value for pam_faillock.so deny parameter">
+        <criteria operator="AND"
+            comment="Check expected pam_faillock.so deny parameter in pam files">
+          <criterion test_ref="test_accounts_passwords_pam_faillock_deny_parameter_pamd_common"
+              comment="Check the deny parameter is present common-auth file"/>
+          <criterion test_ref="test_accounts_passwords_pam_faillock_deny_parameter_no_faillock_conf"
+              comment="Ensure the deny parameter is not present in /etc/security/faillock.conf"/>
+        </criteria>
+        <criteria operator="AND"
+            comment="Check expected pam_faillock.so deny parameter in faillock.conf">
+          <criterion test_ref="test_accounts_passwords_pam_faillock_deny_parameter_no_pamd_common"
+              comment="Check the deny parameter is not present common-auth file"/>
+          <criterion test_ref="test_accounts_passwords_pam_faillock_deny_parameter_faillock_conf"
+              comment="Ensure the deny parameter is present in /etc/security/faillock.conf"/>
+        </criteria>
+      </criteria>
+    </criteria>
+  </definition>
+
+  <!-- The following tests demand complex regex which are necessary more than once.
+       These variables make simpler the usage of regex patterns. -->
+  <constant_variable id="var_accounts_passwords_pam_faillock_deny_pam_unix_regex"
+                datatype="string" version="1"
+                comment="regex to identify pam_unix.so in auth section of pam files">
+    <value>^\s*auth.*pam_unix\.so</value>
+  </constant_variable>
+
+  <constant_variable id="var_accounts_passwords_pam_faillock_deny_pam_faillock_auth_regex"
+                datatype="string" version="1"
+                comment="regex to identify pam_faillock.so entries in auth section of pam files">
+      <value>^\s*auth\s+required\s+pam_faillock\.so.*preauth.*[\s\S]*^\s*auth.*pam_unix\.so[\s\S]*^\s*auth\s+\[default=die\]\s+pam_faillock\.so\s+authfail[\s\S]*^\s*auth\s+sufficient\s+pam_faillock\.so\s+authsucc</value>
+  </constant_variable>
+
+  <constant_variable id="var_accounts_passwords_pam_faillock_deny_pam_faillock_account_regex"
+                datatype="string" version="1"
+                comment="regex to identify pam_faillock.so entry in account section of pam files">
+    <value>^\s*account\s+required\s+pam_faillock\.so.*$</value>
+  </constant_variable>
+
+  <constant_variable
+    id="var_accounts_passwords_pam_faillock_deny_pam_faillock_deny_parameter_regex"
+    datatype="string" version="1"
+    comment="regex to identify pam_faillock.so deny entry in auth section of pam files">
+    <value>^[\s]*auth[\s]+.+[\s]+pam_faillock.so[\s]+[^\n]*deny=([0-9]+)</value>
+  </constant_variable>
+
+  <constant_variable
+              id="var_accounts_passwords_pam_faillock_deny_faillock_conf_deny_parameter_regex"
+              datatype="string" version="1"
+              comment="regex to identify deny entry in /etc/security/faillock.conf">
+    <value>^[\s]*deny[\s]*=[\s]*([0-9]+)</value>
+  </constant_variable>
+
+  <!-- Check occurrences of pam_unix.so in auth section of common-auth file -->
+  <ind:textfilecontent54_test check="all" check_existence="none_exist" version="1"
+        id="test_accounts_passwords_pam_faillock_deny_common_pam_unix_auth"
+        comment="No more than one pam_unix.so is expected in auth section of common-auth">
+    <ind:object object_ref="object_accounts_passwords_pam_faillock_deny_common_pam_unix_auth"/>
+  </ind:textfilecontent54_test>
+
+  <ind:textfilecontent54_object version="1"
+        id="object_accounts_passwords_pam_faillock_deny_common_pam_unix_auth"
+        comment="Get the second and subsequent occurrences of pam_unix.so in auth section of common-auth">
+    <ind:filepath>/etc/pam.d/common-auth</ind:filepath>
+    <ind:pattern operation="pattern match"
+                 var_ref="var_accounts_passwords_pam_faillock_deny_pam_unix_regex"/>
+    <ind:instance datatype="int" operation="greater than">1</ind:instance>
+  </ind:textfilecontent54_object>
+
+  <!-- Check common definition of pam_faillock.so in common-auth -->
+  <ind:textfilecontent54_test check="all" check_existence="only_one_exists" version="1"
+        id="test_accounts_passwords_pam_faillock_deny_common_pam_faillock_auth"
+        comment="One and only one occurrence is expected in auth section of common-auth">
+    <ind:object
+        object_ref="object_accounts_passwords_pam_faillock_deny_common_pam_faillock_auth"/>
+  </ind:textfilecontent54_test>
+
+  <ind:textfilecontent54_object version="1"
+        id="object_accounts_passwords_pam_faillock_deny_common_pam_faillock_auth"
+        comment="Check common definition of pam_faillock.so in auth section of common-auth">
+    <ind:filepath>/etc/pam.d/common-auth</ind:filepath>
+    <ind:pattern operation="pattern match"
+                 var_ref="var_accounts_passwords_pam_faillock_deny_pam_faillock_auth_regex"/>
+    <ind:instance datatype="int" operation="equals">1</ind:instance>
+  </ind:textfilecontent54_object>
+
+  <!-- Check common definition of pam_faillock.so in common-account -->
+  <ind:textfilecontent54_test check="all" check_existence="only_one_exists" version="1"
+        id="test_accounts_passwords_pam_faillock_deny_common_pam_faillock_account"
+        comment="One and only one occurrence is expected in common-account">
+    <ind:object
+        object_ref="object_accounts_passwords_pam_faillock_deny_common_pam_faillock_account"/>
+  </ind:textfilecontent54_test>
+
+  <ind:textfilecontent54_object version="1"
+        id="object_accounts_passwords_pam_faillock_deny_common_pam_faillock_account"
+        comment="Check common definition of pam_faillock.so in account section of common-account">
+    <ind:filepath>/etc/pam.d/common-account</ind:filepath>
+    <ind:pattern operation="pattern match"
+                 var_ref="var_accounts_passwords_pam_faillock_deny_pam_faillock_account_regex"/>
+    <ind:instance datatype="int" operation="equals">1</ind:instance>
+  </ind:textfilecontent54_object>
+
+
+  <!-- boundaries to test the parameter value -->
+  <!-- Specify the required external variable & create corresponding state from it -->
+  <external_variable id="var_accounts_passwords_pam_faillock_deny" datatype="int"
+                     comment="number of failed login attempts allowed" version="1"/>
+
+  <ind:textfilecontent54_state version="1"
+        id="state_accounts_passwords_pam_faillock_deny_parameter_upper_bound">
+    <ind:subexpression datatype="int" operation="less than or equal"
+          var_ref="var_accounts_passwords_pam_faillock_deny"/>
+  </ind:textfilecontent54_state>
+
+  <ind:textfilecontent54_state version="1"
+        id="state_accounts_passwords_pam_faillock_deny_parameter_lower_bound">
+    <ind:subexpression datatype="int" operation="greater than">0</ind:subexpression>
+  </ind:textfilecontent54_state>
+
+  <!-- Check absence of deny parameter in common-auth -->
+  <ind:textfilecontent54_test check="all" check_existence="none_exist" version="1"
+        id="test_accounts_passwords_pam_faillock_deny_parameter_no_pamd_common"
+        comment="Check the absence of deny parameter in common-auth">
+    <ind:object object_ref="object_accounts_passwords_pam_faillock_deny_parameter_pamd_common"/>
+  </ind:textfilecontent54_test>
+
+  <!-- Check expected value of deny parameter in common-auth -->
+  <ind:textfilecontent54_test check="all" check_existence="all_exist" version="1"
+        id="test_accounts_passwords_pam_faillock_deny_parameter_pamd_common"
+        comment="Check the expected deny value in common-auth">
+    <ind:object object_ref="object_accounts_passwords_pam_faillock_deny_parameter_pamd_common"/>
+    <ind:state state_ref="state_accounts_passwords_pam_faillock_deny_parameter_upper_bound"/>
+    <ind:state state_ref="state_accounts_passwords_pam_faillock_deny_parameter_lower_bound"/>
+  </ind:textfilecontent54_test>
+
+  <ind:textfilecontent54_object version="1"
+        id="object_accounts_passwords_pam_faillock_deny_parameter_pamd_common"
+        comment="Get the pam_faillock.so deny parameter from common-auth file">
+    <ind:filepath>/etc/pam.d/common-auth</ind:filepath>
+    <ind:pattern operation="pattern match"
+                 var_ref="var_accounts_passwords_pam_faillock_deny_pam_faillock_deny_parameter_regex"/>
+    <ind:instance datatype="int" operation="equals">1</ind:instance>
+  </ind:textfilecontent54_object>
+
+
+  <!-- Check absence of deny parameter in /etc/security/faillock.conf -->
+  <ind:textfilecontent54_test check="all" check_existence="none_exist" version="1"
+        id="test_accounts_passwords_pam_faillock_deny_parameter_no_faillock_conf"
+        comment="Check the absence of deny parameter in /etc/security/faillock.conf">
+    <ind:object object_ref="object_accounts_passwords_pam_faillock_deny_parameter_faillock_conf"/>
+  </ind:textfilecontent54_test>
+
+  <!-- Check expected value of deny parameter in /etc/security/faillock.conf -->
+  <ind:textfilecontent54_test check="all" check_existence="all_exist" version="1"
+        id="test_accounts_passwords_pam_faillock_deny_parameter_faillock_conf"
+        comment="Check the expected deny value in /etc/security/faillock.conf">
+    <ind:object object_ref="object_accounts_passwords_pam_faillock_deny_parameter_faillock_conf"/>
+    <ind:state state_ref="state_accounts_passwords_pam_faillock_deny_parameter_upper_bound"/>
+    <ind:state state_ref="state_accounts_passwords_pam_faillock_deny_parameter_lower_bound"/>
+  </ind:textfilecontent54_test>
+
+  <ind:textfilecontent54_object version="1"
+      id="object_accounts_passwords_pam_faillock_deny_parameter_faillock_conf"
+      comment="Check the expected pam_faillock.so deny parameter in /etc/security/faillock.conf">
+    <ind:filepath>/etc/security/faillock.conf</ind:filepath>
+    <ind:pattern operation="pattern match"
+          var_ref="var_accounts_passwords_pam_faillock_deny_faillock_conf_deny_parameter_regex"/>
+    <ind:instance datatype="int" operation="equals">1</ind:instance>
+  </ind:textfilecontent54_object>
+</def-group>
diff --git a/linux_os/guide/system/accounts/accounts-pam/locking_out_password_attempts/accounts_passwords_pam_faillock_deny/rule.yml b/linux_os/guide/system/accounts/accounts-pam/locking_out_password_attempts/accounts_passwords_pam_faillock_deny/rule.yml
index 41fba88048..2ada1cb350 100644
--- a/linux_os/guide/system/accounts/accounts-pam/locking_out_password_attempts/accounts_passwords_pam_faillock_deny/rule.yml
+++ b/linux_os/guide/system/accounts/accounts-pam/locking_out_password_attempts/accounts_passwords_pam_faillock_deny/rule.yml
@@ -19,7 +19,7 @@ description: |-
     Where count should be less than or equal to
     {{{ xccdf_value("var_accounts_passwords_pam_faillock_deny") }}} and greater than 0.
     {{% endif %}}
-    {{% if 'ubuntu' not in product %}}
+    {{% if 'ubuntu' not in product and 'wrlinux' not in product %}}
     In order to avoid errors when manually editing these files, it is
     recommended to use the appropriate tools, such as <tt>authselect</tt> or <tt>authconfig</tt>,
     depending on the OS version.
@@ -95,7 +95,7 @@ fixtext: |-
     edit the deny parameter in the following line <tt>after</tt> the <tt>pam_unix.so</tt>
     statement in the <tt>auth</tt> section, like this:
     <pre>auth required pam_faillock.so authfail <tt>deny={{{ xccdf_value("var_accounts_passwords_pam_faillock_deny") }}}</tt> unlock_time={{{ xccdf_value("var_accounts_passwords_pam_faillock_unlock_time") }}} fail_interval={{{ xccdf_value("var_accounts_passwords_pam_faillock_fail_interval") }}}</pre>
-    {{% elif 'ubuntu' in product %}}
+    {{% elif 'ubuntu' in product or 'wrlinux' in product %}}
     Edit <tt>/etc/pam.d/common-auth</tt> and ensure that faillock is configured.
     The pam_faillock.so lines surround the pam_unix.so line. The comment
     "Added to enable faillock" is shown to highlight the additional lines
diff --git a/shared/checks/oval/accounts_password_pam_faillock.xml b/shared/checks/oval/accounts_password_pam_faillock.xml
index c55c143ba5..c140691a80 100644
--- a/shared/checks/oval/accounts_password_pam_faillock.xml
+++ b/shared/checks/oval/accounts_password_pam_faillock.xml
@@ -1,11 +1,19 @@
 <def-group>
   <definition class="compliance" id="accounts_password_pam_faillock" version="1">
     <metadata>
+      {{% if 'wrlinux' in product %}}
+      <title>Check pam_faillock Existence in common-auth</title>
+      {{% else %}}
       <title>Check pam_faillock Existence in system-auth</title>
+      {{% endif %}}
       <affected family="unix">
         <platform>multi_platform_all</platform>
       </affected>
+      {{% if 'wrlinux' in product %}}
+      <description>Check that pam_faillock.so exists in common-auth</description>
+      {{% else %}}
       <description>Check that pam_faillock.so exists in system-auth</description>
+      {{% endif %}}
     </metadata>
     <criteria>
       <criterion comment="Conditions for pam_faillock are satisfied"
@@ -13,12 +21,20 @@
     </criteria>
   </definition>
 
+  {{% if 'wrlinux' in product %}}
+  <ind:textfilecontent54_test check="all" comment="check the configuration of /etc/pam.d/common-auth" id="test_accounts_password_pam_faillock" version="1">
+  {{% else %}}
   <ind:textfilecontent54_test check="all" comment="check the configuration of /etc/pam.d/system-auth" id="test_accounts_password_pam_faillock" version="1">
+  {{% endif %}}
     <ind:object object_ref="obj_accounts_password_pam_faillock" />
   </ind:textfilecontent54_test>
 
   <ind:textfilecontent54_object id="obj_accounts_password_pam_faillock" version="1">
+    {{% if 'wrlinux' in product %}}
+    <ind:filepath>/etc/pam.d/common-auth</ind:filepath>
+    {{% else %}}
     <ind:filepath>/etc/pam.d/system-auth</ind:filepath>
+    {{% endif %}}
     <ind:pattern operation="pattern match">^\s*password\s+(?:(?:required)|(?:requisite))\s+pam_faillock\.so.*$</ind:pattern>
     <ind:instance datatype="int">1</ind:instance>
   </ind:textfilecontent54_object>
diff --git a/shared/macros/10-bash.jinja b/shared/macros/10-bash.jinja
index 31f0617d6e..aa4cbeef58 100644
--- a/shared/macros/10-bash.jinja
+++ b/shared/macros/10-bash.jinja
@@ -783,7 +783,7 @@ authselect enable-feature {{{ feature }}}
 
 #}}
 {{%- macro bash_enable_pam_faillock_directly_in_pam_files() -%}}
-{{% if 'ubuntu' in product %}}
+{{% if 'ubuntu' in product or 'wrlinux' in product %}}
 pam_file="/etc/pam.d/common-auth"
 if ! grep -qE '^\s*auth\s+required\s+pam_faillock\.so\s+preauth.*$' "$pam_file" ; then
     # insert at the top
@@ -989,6 +989,8 @@ fi
 {{%- macro bash_pam_faillock_parameter_value(option, value='', authfail=True) -%}}
 {{% if 'ubuntu' in product %}}
 AUTH_FILES=("/etc/pam.d/common-auth" "/etc/pam.d/password-auth")
+{{% elif 'wrlinux' in product %}}
+AUTH_FILES=("/etc/pam.d/common-auth")
 {{% else %}}
 AUTH_FILES=("/etc/pam.d/system-auth" "/etc/pam.d/password-auth")
 {{% endif %}}
-- 
2.25.1

