From 3cb0d4b6c036596a8775bbaf0c5e44aad578be15 Mon Sep 17 00:00:00 2001
From: Yi Zhao <yi.zhao@windriver.com>
Date: Sun, 26 May 2024 21:46:21 +0800
Subject: [PATCH] Fix accounts_passwords_pam_faillock_unlock_time rule

Upstream-Status: Inappropriate [WRLinux specific]

Signed-off-by: Yi Zhao <yi.zhao@windriver.com>
---
 .../bash/shared.sh                            |   2 +-
 .../oval/wrlinux.xml                          | 185 ++++++++++++++++++
 .../rule.yml                                  |   2 +
 3 files changed, 188 insertions(+), 1 deletion(-)
 create mode 100644 linux_os/guide/system/accounts/accounts-pam/locking_out_password_attempts/accounts_passwords_pam_faillock_unlock_time/oval/wrlinux.xml

diff --git a/linux_os/guide/system/accounts/accounts-pam/locking_out_password_attempts/accounts_passwords_pam_faillock_unlock_time/bash/shared.sh b/linux_os/guide/system/accounts/accounts-pam/locking_out_password_attempts/accounts_passwords_pam_faillock_unlock_time/bash/shared.sh
index 3a32aad36c..65f9dd2aea 100644
--- a/linux_os/guide/system/accounts/accounts-pam/locking_out_password_attempts/accounts_passwords_pam_faillock_unlock_time/bash/shared.sh
+++ b/linux_os/guide/system/accounts/accounts-pam/locking_out_password_attempts/accounts_passwords_pam_faillock_unlock_time/bash/shared.sh
@@ -1,4 +1,4 @@
-# platform = multi_platform_rhel,multi_platform_fedora,multi_platform_ol,multi_platform_rhv,multi_platform_ubuntu
+# platform = multi_platform_rhel,multi_platform_fedora,multi_platform_ol,multi_platform_rhv,multi_platform_ubuntu,multi_platform_wrlinux
 
 {{{ bash_instantiate_variables("var_accounts_passwords_pam_faillock_unlock_time") }}}
 
diff --git a/linux_os/guide/system/accounts/accounts-pam/locking_out_password_attempts/accounts_passwords_pam_faillock_unlock_time/oval/wrlinux.xml b/linux_os/guide/system/accounts/accounts-pam/locking_out_password_attempts/accounts_passwords_pam_faillock_unlock_time/oval/wrlinux.xml
new file mode 100644
index 0000000000..16c5fa2977
--- /dev/null
+++ b/linux_os/guide/system/accounts/accounts-pam/locking_out_password_attempts/accounts_passwords_pam_faillock_unlock_time/oval/wrlinux.xml
@@ -0,0 +1,185 @@
+<def-group>
+  <definition class="compliance" id="{{{ rule_id }}}" version="4">
+    {{{ oval_metadata("The unlock time after number of failed logins should be set correctly.") }}}
+    <criteria operator="AND" comment="Check the proper configuration of pam_faillock.so">
+      <criteria operator="AND" comment="Check if pam_faillock.so is properly enabled">
+        <!-- pam_unix.so is a control module present in all realistic scenarios and also used
+             as reference for the correct position of pam_faillock.so in auth section. If the
+             system is properly configured, it must appear only once in auth section. -->
+        <criterion test_ref="test_accounts_passwords_pam_faillock_unlock_time_common_pam_unix_auth"
+            comment="pam_unix.so appears only once in auth section of common-auth"/>
+        <criterion test_ref="test_accounts_passwords_pam_faillock_unlock_time_common_pam_faillock_auth"
+            comment="pam_faillock.so is properly defined in auth section of common-auth"/>
+        <criterion test_ref="test_accounts_passwords_pam_faillock_unlock_time_common_pam_faillock_account"
+            comment="pam_faillock.so is properly defined in common-account"/>
+      </criteria>
+
+      <!-- pam_faillock.so parameters should be defined in /etc/security/faillock.conf whenever
+           possible. But due to backwards compatibility, they are also allowed in pam files
+           directly. In case they are defined in both places, pam files have precedence and this
+           may confuse the assessment. The following tests ensure only one option is used. -->
+      <criteria operator="OR" comment="Check expected value for pam_faillock.so unlock_time parameter">
+        <criteria operator="AND"
+            comment="Check expected pam_faillock.so unlock_time parameter in pam files">
+          <criterion test_ref="test_accounts_passwords_pam_faillock_unlock_time_parameter_pamd_common"
+              comment="Check the unlock_time parameter is present common-auth file"/>
+          <criterion test_ref="test_accounts_passwords_pam_faillock_unlock_time_parameter_no_faillock_conf"
+              comment="Ensure the unlock_time parameter is not present in /etc/security/faillock.conf"/>
+        </criteria>
+        <criteria operator="AND"
+            comment="Check expected pam_faillock.so unlock_time parameter in faillock.conf">
+          <criterion test_ref="test_accounts_passwords_pam_faillock_unlock_time_parameter_no_pamd_common"
+              comment="Check the unlock_time parameter is not present common-auth file"/>
+          <criterion test_ref="test_accounts_passwords_pam_faillock_unlock_time_parameter_faillock_conf"
+              comment="Ensure the unlock_time parameter is present in /etc/security/faillock.conf"/>
+        </criteria>
+      </criteria>
+    </criteria>
+  </definition>
+
+  <!-- The following tests demand complex regex which are necessary more than once.
+       These variables make simpler the usage of regex patterns. -->
+  <constant_variable id="var_accounts_passwords_pam_faillock_unlock_time_pam_unix_regex"
+                datatype="string" version="1"
+                comment="regex to identify pam_unix.so in auth section of pam files">
+    <value>^\s*auth.*pam_unix\.so</value>
+  </constant_variable>
+
+  <constant_variable id="var_accounts_passwords_pam_faillock_unlock_time_pam_faillock_auth_regex"
+                datatype="string" version="1"
+                comment="regex to identify pam_faillock.so entries in auth section of pam files">
+      <value>^\s*auth\s+required\s+pam_faillock\.so.*preauth.*[\s\S]*^\s*auth.*pam_unix\.so[\s\S]*^\s*auth\s+\[default=die\]\s+pam_faillock\.so\s+authfail[\s\S]*^\s*auth\s+sufficient\s+pam_faillock\.so\s+authsucc</value>
+  </constant_variable>
+
+  <constant_variable id="var_accounts_passwords_pam_faillock_unlock_time_pam_faillock_account_regex"
+                datatype="string" version="1"
+                comment="regex to identify pam_faillock.so entry in account section of pam files">
+    <value>^\s*account\s+required\s+pam_faillock\.so\s*(#.*)?$</value>
+  </constant_variable>
+
+  <constant_variable
+    id="var_accounts_passwords_pam_faillock_unlock_time_pam_faillock_unlock_time_parameter_regex"
+    datatype="string" version="1"
+    comment="regex to identify pam_faillock.so unlock_time entry in auth section of pam files">
+    <value>^[\s]*auth[\s]+.+[\s]+pam_faillock.so[\s]+[^\n]*unlock_time=([0-9]+)</value>
+  </constant_variable>
+
+  <constant_variable
+              id="var_accounts_passwords_pam_faillock_unlock_time_faillock_conf_unlock_time_parameter_regex"
+              datatype="string" version="1"
+              comment="regex to identify unlock_time entry in /etc/security/faillock.conf">
+    <value>^[\s]*unlock_time[\s]*=[\s]*([0-9]+)</value>
+  </constant_variable>
+
+  <!-- Check occurrences of pam_unix.so in auth section of common-auth file -->
+  <ind:textfilecontent54_test check="all" check_existence="none_exist" version="1"
+        id="test_accounts_passwords_pam_faillock_unlock_time_common_pam_unix_auth"
+        comment="No more than one pam_unix.so is expected in auth section of common-auth">
+    <ind:object object_ref="object_accounts_passwords_pam_faillock_unlock_time_common_pam_unix_auth"/>
+  </ind:textfilecontent54_test>
+
+  <ind:textfilecontent54_object version="1"
+        id="object_accounts_passwords_pam_faillock_unlock_time_common_pam_unix_auth"
+        comment="Get the second and subsequent occurrences of pam_unix.so in auth section of common-auth">
+    <ind:filepath>/etc/pam.d/common-auth</ind:filepath>
+    <ind:pattern operation="pattern match"
+                 var_ref="var_accounts_passwords_pam_faillock_unlock_time_pam_unix_regex"/>
+    <ind:instance datatype="int" operation="greater than">1</ind:instance>
+  </ind:textfilecontent54_object>
+
+  <!-- Check common definition of pam_faillock.so in common-auth -->
+  <ind:textfilecontent54_test check="all" check_existence="only_one_exists" version="1"
+        id="test_accounts_passwords_pam_faillock_unlock_time_common_pam_faillock_auth"
+        comment="One and only one occurrence is expected in auth section of common-auth">
+    <ind:object
+        object_ref="object_accounts_passwords_pam_faillock_unlock_time_common_pam_faillock_auth"/>
+  </ind:textfilecontent54_test>
+
+  <ind:textfilecontent54_object version="1"
+        id="object_accounts_passwords_pam_faillock_unlock_time_common_pam_faillock_auth"
+        comment="Check common definition of pam_faillock.so in auth section of common-auth">
+    <ind:filepath>/etc/pam.d/common-auth</ind:filepath>
+    <ind:pattern operation="pattern match"
+                 var_ref="var_accounts_passwords_pam_faillock_unlock_time_pam_faillock_auth_regex"/>
+    <ind:instance datatype="int" operation="equals">1</ind:instance>
+  </ind:textfilecontent54_object>
+
+  <!-- Check account definition of pam_faillock.so in common-account -->
+  <ind:textfilecontent54_test check="all" check_existence="only_one_exists" version="1"
+        id="test_accounts_passwords_pam_faillock_unlock_time_common_pam_faillock_account"
+        comment="One and only one occurrence is expected in common-account">
+    <ind:object
+        object_ref="object_accounts_passwords_pam_faillock_unlock_time_common_pam_faillock_account"/>
+  </ind:textfilecontent54_test>
+
+  <ind:textfilecontent54_object version="1"
+        id="object_accounts_passwords_pam_faillock_unlock_time_common_pam_faillock_account"
+        comment="Check common definition of pam_faillock.so in account section of common-account">
+    <ind:filepath>/etc/pam.d/common-account</ind:filepath>
+    <ind:pattern operation="pattern match"
+                 var_ref="var_accounts_passwords_pam_faillock_unlock_time_pam_faillock_account_regex"/>
+    <ind:instance datatype="int" operation="equals">1</ind:instance>
+  </ind:textfilecontent54_object>
+
+
+  <!-- boundaries to test the parameter value -->
+  <!-- Specify the required external variable & create corresponding state from it -->
+  <external_variable id="var_accounts_passwords_pam_faillock_unlock_time" datatype="int"
+                     comment="number of failed login attempts allowed" version="1"/>
+
+  <ind:textfilecontent54_state version="1"
+        id="state_accounts_passwords_pam_faillock_unlock_time_parameter_lower_bound">
+    <ind:subexpression datatype="int" operation="greater than or equal"
+          var_ref="var_accounts_passwords_pam_faillock_unlock_time"/>
+  </ind:textfilecontent54_state>
+
+
+  <!-- Check absence of unlock_time parameter in common-auth -->
+  <ind:textfilecontent54_test check="all" check_existence="none_exist" version="1"
+        id="test_accounts_passwords_pam_faillock_unlock_time_parameter_no_pamd_common"
+        comment="Check the absence of unlock_time parameter in common-auth">
+    <ind:object object_ref="object_accounts_passwords_pam_faillock_unlock_time_parameter_pamd_common"/>
+  </ind:textfilecontent54_test>
+
+  <!-- Check expected value of unlock_time parameter in common-auth -->
+  <ind:textfilecontent54_test check="all" check_existence="all_exist" version="1"
+        id="test_accounts_passwords_pam_faillock_unlock_time_parameter_pamd_common"
+        comment="Check the expected unlock_time value in common-auth">
+    <ind:object object_ref="object_accounts_passwords_pam_faillock_unlock_time_parameter_pamd_common"/>
+    <ind:state state_ref="state_accounts_passwords_pam_faillock_unlock_time_parameter_lower_bound"/>
+  </ind:textfilecontent54_test>
+
+  <ind:textfilecontent54_object version="1"
+        id="object_accounts_passwords_pam_faillock_unlock_time_parameter_pamd_common"
+        comment="Get the pam_faillock.so unlock_time parameter from common-auth file">
+    <ind:filepath>/etc/pam.d/common-auth</ind:filepath>
+    <ind:pattern operation="pattern match"
+                 var_ref="var_accounts_passwords_pam_faillock_unlock_time_pam_faillock_unlock_time_parameter_regex"/>
+    <ind:instance datatype="int" operation="equals">1</ind:instance>
+  </ind:textfilecontent54_object>
+
+
+  <!-- Check absence of unlock_time parameter in /etc/security/faillock.conf -->
+  <ind:textfilecontent54_test check="all" check_existence="none_exist" version="1"
+        id="test_accounts_passwords_pam_faillock_unlock_time_parameter_no_faillock_conf"
+        comment="Check the absence of unlock_time parameter in /etc/security/faillock.conf">
+    <ind:object object_ref="object_accounts_passwords_pam_faillock_unlock_time_parameter_faillock_conf"/>
+  </ind:textfilecontent54_test>
+
+  <!-- Check expected value of unlock_time parameter in /etc/security/faillock.conf -->
+  <ind:textfilecontent54_test check="all" check_existence="all_exist" version="1"
+        id="test_accounts_passwords_pam_faillock_unlock_time_parameter_faillock_conf"
+        comment="Check the expected unlock_time value in /etc/security/faillock.conf">
+    <ind:object object_ref="object_accounts_passwords_pam_faillock_unlock_time_parameter_faillock_conf"/>
+    <ind:state state_ref="state_accounts_passwords_pam_faillock_unlock_time_parameter_lower_bound"/>
+  </ind:textfilecontent54_test>
+
+  <ind:textfilecontent54_object version="1"
+      id="object_accounts_passwords_pam_faillock_unlock_time_parameter_faillock_conf"
+      comment="Check the expected pam_faillock.so unlock_time parameter in /etc/security/faillock.conf">
+    <ind:filepath>/etc/security/faillock.conf</ind:filepath>
+    <ind:pattern operation="pattern match"
+          var_ref="var_accounts_passwords_pam_faillock_unlock_time_faillock_conf_unlock_time_parameter_regex"/>
+    <ind:instance datatype="int" operation="equals">1</ind:instance>
+  </ind:textfilecontent54_object>
+</def-group>
diff --git a/linux_os/guide/system/accounts/accounts-pam/locking_out_password_attempts/accounts_passwords_pam_faillock_unlock_time/rule.yml b/linux_os/guide/system/accounts/accounts-pam/locking_out_password_attempts/accounts_passwords_pam_faillock_unlock_time/rule.yml
index ea9414e6b0..63a1e14983 100644
--- a/linux_os/guide/system/accounts/accounts-pam/locking_out_password_attempts/accounts_passwords_pam_faillock_unlock_time/rule.yml
+++ b/linux_os/guide/system/accounts/accounts-pam/locking_out_password_attempts/accounts_passwords_pam_faillock_unlock_time/rule.yml
@@ -21,8 +21,10 @@ description: |-
 
     pam_faillock.so module requires multiple entries in pam files. These entries must be carefully
     defined to work as expected. In order to avoid any errors when manually editing these files,
+    {{% if 'wrlinux' not in product %}}
     it is recommended to use the appropriate tools, such as <tt>authselect</tt> or <tt>authconfig</tt>,
     depending on the OS version.
+    {{% endif %}}
 
     If <tt>unlock_time</tt> is set to <tt>0</tt>, manual intervention by an administrator is required
     to unlock a user. This should be done using the <tt>faillock</tt> tool.
-- 
2.25.1

