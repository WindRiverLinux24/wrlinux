From 4066b6a10bba90568abd7e4525217628b6ac5bd9 Mon Sep 17 00:00:00 2001
From: Hongxu Jia <hongxu.jia@windriver.com>
Date: Mon, 29 Nov 2021 14:58:16 +0800
Subject: [PATCH 5/9] create links to the deploy directory in /boot and /ostree

Rework 0001-ostree-bootloader-uboot.c-Create-links-to-the-deploy.patch
to implement function ostree_bootloader_create_link_to_sysroot to create
links to the deploy directory in /boot and /ostree for both of grub and uboot

Having service links in the deploy directory allows a boot loader to
be more throughly locked down.  For example:

% ls -l rootfs_ota_boot/? |awk '{print $1" "$9" "$10" "$11}'
lrwxrwxrwx rootfs_ota_boot/1 -> ostree/wrl_os-f650e47c2868b887de6e739dc32271c654b049e4e8d61c420d69426afb544455
lrwxrwxrwx rootfs_ota_boot/2 -> ostree/wrl_os-f650e47c2868b887de6e739dc32271c654b049e4e8d61c420d69426afb544455

ls -l rootfs_ota/ostree/? |awk '{print $1" "$9" "$10" "$11}'
lrwxrwxrwx rootfs_ota/ostree/1 -> boot.0/wrl_os/f650e47c2868b887de6e739dc32271c654b049e4e8d61c420d69426afb544455/0
lrwxrwxrwx rootfs_ota/ostree/2 -> boot.0/wrl_os/f650e47c2868b887de6e739dc32271c654b049e4e8d61c420d69426afb544455/1

The kernel arguments are not taken from the ostree "hints" in this
case, because the configuration is much more locked down.
The boot loader will use the service links and other variables to
select a rollback or primary boot choices.

Upstream-Status: Inappropriate [WRLinux Specific]

Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>

This patch is WRLinux specific because of the way ostree is integrated
into WRLinux. OSTree has its own assumption of integration. WRLinux
is using something different, thus this patch. This patch is needed
in WRLinux until WRLinux changes the way ostree is integrated.

Signed-off-by: Chen Qi <Qi.Chen@windriver.com>
---
 src/libostree/ostree-bootloader-grub2.c |  7 +++
 src/libostree/ostree-bootloader-uboot.c |  7 +++
 src/libostree/ostree-sysroot-deploy.c   | 68 +++++++++++++++++++++++++
 src/libostree/ostree-sysroot.h          |  7 +++
 4 files changed, 89 insertions(+)

diff --git a/src/libostree/ostree-bootloader-grub2.c b/src/libostree/ostree-bootloader-grub2.c
index e1ee786..592af72 100644
--- a/src/libostree/ostree-bootloader-grub2.c
+++ b/src/libostree/ostree-bootloader-grub2.c
@@ -330,6 +330,13 @@ _ostree_bootloader_grub2_write_config (OstreeBootloader *bootloader, int bootver
 {
   OstreeBootloaderGrub2 *self = OSTREE_BOOTLOADER_GRUB2 (bootloader);
 
+  if(!ostree_bootloader_create_link_to_sysroot (self->sysroot, bootversion, cancellable, error))
+    {
+      g_set_error (error, G_IO_ERROR, G_IO_ERROR_FAILED,
+                  "ostree_bootloader_create_link_to_sysroot failed");
+      return FALSE;
+    }
+
   /* Autotests can set this envvar to select which code path to test, useful for OS installers as
    * well */
   gboolean use_system_grub2_mkconfig = TRUE;
diff --git a/src/libostree/ostree-bootloader-uboot.c b/src/libostree/ostree-bootloader-uboot.c
index ecae544..12d1f34 100644
--- a/src/libostree/ostree-bootloader-uboot.c
+++ b/src/libostree/ostree-bootloader-uboot.c
@@ -165,6 +165,13 @@ _ostree_bootloader_uboot_write_config (OstreeBootloader *bootloader, int bootver
 {
   OstreeBootloaderUboot *self = OSTREE_BOOTLOADER_UBOOT (bootloader);
 
+  if(!ostree_bootloader_create_link_to_sysroot (self->sysroot, bootversion, cancellable, error))
+    {
+      g_set_error (error, G_IO_ERROR, G_IO_ERROR_FAILED,
+                  "ostree_bootloader_create_link_to_sysroot failed");
+      return FALSE;
+    }
+
   /* This should follow the symbolic link to the current bootversion. */
   g_autofree char *config_contents = glnx_file_get_contents_utf8_at (
       self->sysroot->sysroot_fd, uboot_config_path, NULL, cancellable, error);
diff --git a/src/libostree/ostree-sysroot-deploy.c b/src/libostree/ostree-sysroot-deploy.c
index 684d487..e23c958 100644
--- a/src/libostree/ostree-sysroot-deploy.c
+++ b/src/libostree/ostree-sysroot-deploy.c
@@ -4033,3 +4033,71 @@ ostree_sysroot_deployment_set_mutable (OstreeSysroot *self, OstreeDeployment *de
 
   return TRUE;
 }
+
+gboolean
+ostree_bootloader_create_link_to_sysroot (OstreeSysroot                 *sysroot,
+                                          int                            bootversion,
+                                          GCancellable                  *cancellable,
+                                          GError                       **error)
+{
+
+  g_autoptr(GPtrArray) loader_configs = NULL;
+  if (!_ostree_sysroot_read_boot_loader_configs (sysroot, bootversion,
+                                                 &loader_configs,
+                                                 cancellable, error))
+    return FALSE;
+
+  for (guint i = 0; i < loader_configs->len; i++)
+    {
+      OstreeBootconfigParser *config = loader_configs->pdata[i];
+      const char *options;
+      const char *kernel;
+
+      kernel = ostree_bootconfig_parser_get (config, "linux");
+      if (!kernel)
+        {
+          g_set_error (error, G_IO_ERROR, G_IO_ERROR_FAILED,
+                      "No kernel found");
+          return FALSE;
+
+        }
+
+      g_autofree char * bootdir = strndup (kernel, strrchr(kernel, '/') - kernel);
+      g_autofree char *lbootdir = g_strdup_printf ("boot/%i", i + 1);
+      unlinkat(sysroot->sysroot_fd, lbootdir, 0);
+      if (symlinkat(bootdir + 1, sysroot->sysroot_fd, lbootdir) < 0)
+        {
+          g_set_error (error, G_IO_ERROR, G_IO_ERROR_FAILED,
+                       "Could not link boot directory.");
+          return FALSE;
+        }
+
+      options = ostree_bootconfig_parser_get (config, "options");
+      if (!options)
+        {
+          g_set_error (error, G_IO_ERROR, G_IO_ERROR_FAILED,
+                      "No options found");
+          return FALSE;
+        }
+
+      g_auto(GStrv) opts = g_strsplit (options, " ", -1);
+      for (char **iter = opts; *iter; iter++)
+        {
+          const char *opt = *iter;
+          if (g_str_has_prefix (opt, "ostree=/ostree/"))
+            {
+              g_autofree char *boot_link = g_strdup (opt + strlen ("ostree=/ostree/"));
+              g_autofree char *linkdir = g_strdup_printf ("ostree/%i", i + 1);
+              unlinkat(sysroot->sysroot_fd, linkdir, 0);
+              if (symlinkat(boot_link, sysroot->sysroot_fd, linkdir) < 0)
+                {
+                  g_set_error (error, G_IO_ERROR, G_IO_ERROR_FAILED,
+                               "Could not link boot directory.");
+                  return FALSE;
+                }
+            }
+        }
+    }
+
+  return TRUE;
+}
diff --git a/src/libostree/ostree-sysroot.h b/src/libostree/ostree-sysroot.h
index e84007a..7e4ba53 100644
--- a/src/libostree/ostree-sysroot.h
+++ b/src/libostree/ostree-sysroot.h
@@ -257,4 +257,11 @@ gboolean ostree_sysroot_simple_write_deployment (OstreeSysroot *sysroot, const c
                                                  OstreeSysrootSimpleWriteDeploymentFlags flags,
                                                  GCancellable *cancellable, GError **error);
 
+_OSTREE_PUBLIC
+gboolean ostree_bootloader_create_link_to_sysroot (OstreeSysroot                 *sysroot,
+                                          int                            bootversion,
+                                          GCancellable                  *cancellable,
+                                          GError                       **error);
+
+
 G_END_DECLS
-- 
2.27.0

